openapi: 3.0.0
info:
  title: Hotel Management System API
  version: 1.0.0
  description: >
    A complete RESTful API for a hotel management system,
    including room booking, user management, payment, staff tasks, reports, and notifications.
servers:
  - url: http://localhost:5000/api/v1
    description: Local development server

tags:
  - name: Auth
    description: Endpoints for user registration, login, logout, and password reset.
  - name: Users
    description: User management endpoints.
  - name: Rooms
    description: room management endpoints.
  - name: Bookings
    description: Booking management endpoints.
  - name: Payments
    description: Payment management endpoints.
  - name: Staff
    description: Staff management endpoints.
  - name: Reports
    description: Reports management endpoints.
  - name: Notifications
    description: notifications management endpoints.
  - name: Settings
    description: system settings management endpoints.
  - name: Logs
    description: system logs management endpoints.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Auth Schemas
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "Rahim Uddin"
        email:
          type: string
          format: email
          example: "rahim@example.com"
        password:
          type: string
          format: password
          example: "StrongPassword123"
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "rahim@example.com"
        password:
          type: string
          format: password
          example: "StrongPassword123"
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "d1f3e8f5-3ac1-4a53-bb4b-3f3a7c123abc"
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation successful"

    # Users Schemas
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [admin, receptionist, customer, staff]
        status:
          type: string
          enum: [active, banned]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [admin, receptionist, customer, staff]
        status:
          type: string
          enum: [active, banned]

    # Rooms Schemas
    Room:
      type: object
      properties:
        _id:
          type: string
        roomNumber:
          type: string
        roomType:
          type: string
          enum: [single, double, suite]
        price:
          type: number
        status:
          type: string
          enum: [available, occupied, cleaning]
        description:
          type: string
        images:
          type: array
          items:
            type: string
            format: uri
        createdAt:
          type: string
          format: date-time
    RoomInput:
      type: object
      required:
        - roomNumber
        - roomType
        - price
        - status
      properties:
        roomNumber:
          type: string
        roomType:
          type: string
          enum: [single, double, suite]
        price:
          type: number
        status:
          type: string
          enum: [available, occupied, cleaning]
        description:
          type: string
        images:
          type: array
          items:
            type: string
            format: uri

    # Bookings Schemas
    Booking:
      type: object
      properties:
        _id:
          type: string
        customerId:
          type: string
        roomId:
          type: string
        checkInDate:
          type: string
          format: date
        checkOutDate:
          type: string
          format: date
        status:
          type: string
          enum: [booked, checked-in, checked-out, cancelled]
        totalAmount:
          type: number
        paymentStatus:
          type: string
          enum: [unpaid, paid, refunded]
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
    BookingInput:
      type: object
      required:
        - roomId
        - checkInDate
        - checkOutDate
      properties:
        roomId:
          type: string
        checkInDate:
          type: string
          format: date
        checkOutDate:
          type: string
          format: date

    # Payments Schemas
    Payment:
      type: object
      properties:
        _id:
          type: string
        bookingId:
          type: string
        amount:
          type: number
        method:
          type: string
          enum: [cash, card, sslcommerz, stripe]
        status:
          type: string
          enum: [pending, completed, failed]
        transactionId:
          type: string
        paidAt:
          type: string
          format: date-time
    PaymentInput:
      type: object
      required:
        - bookingId
        - amount
        - method
      properties:
        bookingId:
          type: string
        amount:
          type: number
        method:
          type: string
          enum: [cash, card, sslcommerz, stripe]

    # Staff Schemas
    Task:
      type: object
      properties:
        _id:
          type: string
        roomId:
          type: string
        assignedTo:
          type: string
        status:
          type: string
          enum: [pending, in-progress, done]
        note:
          type: string
        updatedAt:
          type: string
          format: date-time
    TaskInput:
      type: object
      required:
        - roomId
        - assignedTo
        - status
      properties:
        roomId:
          type: string
        assignedTo:
          type: string
        status:
          type: string
          enum: [pending, in-progress, done]
        note:
          type: string

    # Notifications Schemas
    Notification:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        title:
          type: string
        message:
          type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time

    # Settings Schemas
    Settings:
      type: object
      properties:
        hotelName:
          type: string
        currency:
          type: string
        taxPercentage:
          type: number
        discountPolicy:
          type: string
        cancellationPolicy:
          type: string
        checkInTime:
          type: string
        checkOutTime:
          type: string
        emailTemplates:
          type: object
          properties:
            bookingConfirmation:
              type: string
            preCheckinReminder:
              type: string
    SettingsInput:
      type: object
      required:
        - hotelName
        - currency
      properties:
        hotelName:
          type: string
        currency:
          type: string
        taxPercentage:
          type: number
        discountPolicy:
          type: string
        cancellationPolicy:
          type: string
        checkInTime:
          type: string
        checkOutTime:
          type: string
        emailTemplates:
          type: object
          properties:
            bookingConfirmation:
              type: string
            preCheckinReminder:
              type: string

    # Logs Schemas
    Log:
      type: object
      properties:
        _id:
          type: string
        action:
          type: string
          example: create_booking
        performedBy:
          type: string
        meta:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time

security:
  - BearerAuth: []

paths:
  # Auth Endpoints
  /auth/register:
    post:
      tags:
        - Auth
      summary: New customer registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Registration was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Incorrect input or user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /auth/login:
    post:
      tags:
        - Auth
      summary: User login (for all roles)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful, token issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /auth/logout:
    post:
      tags:
        - Auth
      summary: User logout
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: create new access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "d1f3e8f5-3ac1-4a53-bb4b-3f3a7c123abc"
      responses:
        "200":
          description: New access token issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Sending OTP or link for password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "rahim@example.com"
      responses:
        "200":
          description: Reset link or OTP has been sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  example: "reset-token-123"
                newPassword:
                  type: string
                  format: password
                  example: "NewStrongPassword123"
      responses:
        "200":
          description: Password has been reset successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  # Users Endpoints
  /users:
    get:
      tags:
        - Users
      summary: View list of all users (admin only)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User list returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - Users
      summary: Create new user (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      tags:
        - Users
      summary: View specific user details (self or admin)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      tags:
        - Users
      summary: Update user information (self or admin)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
        - Users
      summary: Delete user (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  # Rooms Endpoints
  /rooms:
    get:
      tags:
        - Rooms
      summary: View list of all rooms
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Room list returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Room"
    post:
      tags:
        - Rooms
      summary: Add new room (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomInput"
      responses:
        "201":
          description: Room added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"

  /rooms/{id}:
    get:
      tags:
        - Rooms
      summary: View details of a specific room
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Room details returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
    put:
      tags:
        - Rooms
      summary: Update room (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomInput"
      responses:
        "200":
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
    delete:
      tags:
        - Rooms
      summary: Delete room (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Room deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  # Bookings Endpoints
  /bookings:
    get:
      tags:
        - Bookings
      summary: View list of all bookings (admin/receptionist only)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Booking list returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"
    post:
      tags:
        - Bookings
      summary: Create new booking (customer/receptionist)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingInput"
      responses:
        "201":
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"

  /bookings/my:
    get:
      tags:
        - Bookings
      summary: View own booking list (customer)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Own booking list returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"

  /bookings/{id}:
    get:
      tags:
        - Bookings
      summary: View specific booking details
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Booking details returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
    delete:
      tags:
        - Bookings
      summary: Cancel booking (admin/customer)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /bookings/{id}/checkin:
    put:
      tags:
        - Bookings
      summary: Check-in (admin/receptionist)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Check-in successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /bookings/{id}/checkout:
    put:
      tags:
        - Bookings
      summary: Check-out (admin/receptionist)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Check-out successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  # Payments Endpoints
  /payments:
    post:
      tags:
        - Payments
      summary: Make payment for a booking (customer)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentInput"
      responses:
        "201":
          description: Payment completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"

  /payments/my:
    get:
      tags:
        - Payments
      summary: View own payment history (customer)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Own payment data returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"

  /payments/{id}:
    get:
      tags:
        - Payments
      summary: View specific payment details (admin/owner)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Payment information returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"

  /payments/booking/{bookingId}:
    get:
      tags:
        - Payments
      summary: View payment of a specific booking (admin)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Booking payment information returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"

  # Staff Endpoints
  /tasks:
    get:
      tags:
        - Staff
      summary: View all tasks assigned to staff
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Task list returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      tags:
        - Staff
      summary: Create new cleaning task (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}:
    put:
      tags:
        - Staff
      summary: Update cleaning task status (staff)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, in-progress, done]
                note:
                  type: string
      responses:
        "200":
          description: Task status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  # Reports Endpoints
  /dashboard/overview:
    get:
      tags:
        - Reports
      summary: Dashboard summary report (admin only)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Overview report returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalBookingsToday:
                    type: integer
                  totalRevenueToday:
                    type: number
                  availableRooms:
                    type: integer
                  occupiedRooms:
                    type: integer

  /reports/bookings:
    get:
      tags:
        - Reports
      summary: Booking Summary Report (Admin Only)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Booking report has been returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                    totalBookings:
                      type: integer

  /reports/revenue:
    get:
      tags:
        - Reports
      summary: Revenue Report (Admin Only)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Revenue report has been returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                    totalRevenue:
                      type: number

  # Notifications Endpoints
  /notifications:
    get:
      tags:
        - Notifications
      summary: View all notifications of the user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Notification list has been successfully returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"

  /notifications/{id}/read:
    put:
      tags:
        - Notifications
      summary: Mark specific notification as read
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Notification has been successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"

  # Settings Endpoints
  /settings:
    get:
      tags:
        - Settings
      summary: View hotel settings information (Admin Only)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Settings have been successfully returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
    put:
      tags:
        - Settings
      summary: Update hotel settings (Admin Only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsInput"
      responses:
        "200":
          description: Settings have been successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"

  # Logs Endpoints
  /logs:
    get:
      tags:
        - Logs
      summary: View system logs and activity history for Admin
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: action
          required: false
          schema:
            type: string
          description: Specific action filter (e.g., create_booking, login, etc.)
        - in: query
          name: userId
          required: false
          schema:
            type: string
          description: Filter activity of a specific user
      responses:
        "200":
          description: Log data has been successfully returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Log"
